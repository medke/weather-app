// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app_zvoove/test/main_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i8;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:weather_app_zvoove/data/models/base/result/result.dart' as _i1;
import 'package:weather_app_zvoove/data/models/weather/city_model.dart' as _i7;
import 'package:weather_app_zvoove/data/models/weather/weather_model.dart'
    as _i5;
import 'package:weather_app_zvoove/data/network/api/api_network.dart' as _i9;
import 'package:weather_app_zvoove/features/weather/weather.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<S, F extends _i1.Failure<dynamic>> extends _i2.SmartFake
    implements _i1.Result<S, F> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_1 extends _i2.SmartFake implements _i3.WeatherState {
  _FakeWeatherState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_2 extends _i2.SmartFake implements _i4.Client {
  _FakeClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_3 extends _i2.SmartFake implements _i5.WeatherModel {
  _FakeWeatherModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i2.SmartFake implements _i4.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i2.Mock implements _i3.WeatherRepository {
  @override
  _i6.Future<_i1.Result<_i3.WeatherData, _i1.Failure<dynamic>>> getWeather(
          {required _i7.City? city}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
          {#city: city},
        ),
        returnValue:
            _i6.Future<_i1.Result<_i3.WeatherData, _i1.Failure<dynamic>>>.value(
                _FakeResult_0<_i3.WeatherData, _i1.Failure<dynamic>>(
          this,
          Invocation.method(
            #getWeather,
            [],
            {#city: city},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i1.Result<_i3.WeatherData, _i1.Failure<dynamic>>>.value(
                _FakeResult_0<_i3.WeatherData, _i1.Failure<dynamic>>(
          this,
          Invocation.method(
            #getWeather,
            [],
            {#city: city},
          ),
        )),
      ) as _i6.Future<_i1.Result<_i3.WeatherData, _i1.Failure<dynamic>>>);
}

/// A class which mocks [WeatherCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherCubit extends _i2.Mock implements _i3.WeatherCubit {
  @override
  _i3.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWeatherState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.WeatherState);

  @override
  _i6.Stream<_i3.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.WeatherState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i3.WeatherState>.empty(),
      ) as _i6.Stream<_i3.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getWeather({_i7.City? currentCity}) => super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
          {#currentCity: currentCity},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i3.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i3.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeatherApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApi extends _i2.Mock implements _i9.WeatherApi {
  @override
  _i4.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_2(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_2(
          this,
          Invocation.getter(#client),
        ),
      ) as _i4.Client);

  @override
  String buildUrl({required _i7.City? city}) => (super.noSuchMethod(
        Invocation.method(
          #buildUrl,
          [],
          {#city: city},
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #buildUrl,
            [],
            {#city: city},
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #buildUrl,
            [],
            {#city: city},
          ),
        ),
      ) as String);

  @override
  _i6.Future<_i5.WeatherModel> getWeather({required _i7.City? city}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
          {#city: city},
        ),
        returnValue: _i6.Future<_i5.WeatherModel>.value(_FakeWeatherModel_3(
          this,
          Invocation.method(
            #getWeather,
            [],
            {#city: city},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.WeatherModel>.value(_FakeWeatherModel_3(
          this,
          Invocation.method(
            #getWeather,
            [],
            {#city: city},
          ),
        )),
      ) as _i6.Future<_i5.WeatherModel>);

  @override
  _i6.Future<_i4.Response> post(
    String? url, {
    String? body,
    bool? withHttp = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #withHttp: withHttp,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #withHttp: withHttp,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #withHttp: withHttp,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  T processResponse<T>({
    required _i4.Response? response,
    required _i9.FromJsonParser<T>? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #processResponse,
          [],
          {
            #response: response,
            #parser: parser,
          },
        ),
        returnValue: _i10.dummyValue<T>(
          this,
          Invocation.method(
            #processResponse,
            [],
            {
              #response: response,
              #parser: parser,
            },
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<T>(
          this,
          Invocation.method(
            #processResponse,
            [],
            {
              #response: response,
              #parser: parser,
            },
          ),
        ),
      ) as T);
}
